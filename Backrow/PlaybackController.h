/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AppleTV.framework/AppleTV
 */

#import <Foundation/Foundation.h> // Unknown library

@class AppNccpHandlerDelegate, CDNDownloadData, NSLock, NSMutableString, NSMutableArray, NSString, NSCondition, NSConditionLock;

__attribute__((visibility("hidden")))
@interface PlaybackController : NSObject {
@private
	AppNccpHandlerDelegate *nccpDelegate;	// 4 = 0x4
	BOOL playListGenError;	// 8 = 0x8
	int playbackState;	// 12 = 0xc
	double playbackPosition;	// 16 = 0x10
	int playingBitrate;	// 24 = 0x18
	int playListGenTimeElapsed;	// 28 = 0x1c
	long movieID;	// 32 = 0x20
	long episodeID;	// 36 = 0x24
	BOOL isNetworkReachable;	// 40 = 0x28
	BOOL isUsing3G;	// 41 = 0x29
	unsigned initialBitrateMaskWifi;	// 44 = 0x2c
	unsigned initialBitrateMask3G;	// 48 = 0x30
	int downloadableContentProfile;	// 52 = 0x34
	unsigned contentProfileSet;	// 56 = 0x38
	BOOL keyUseCustom;	// 60 = 0x3c
	BOOL playListUseCustom;	// 61 = 0x3d
	BOOL firstNccpCall;	// 62 = 0x3e
	double lastPingTime;	// 64 = 0x40
	int m3u8BandwidthSetting;	// 72 = 0x48
	BOOL licenseIssued;	// 76 = 0x4c
	NSString *playListGenerationError;	// 80 = 0x50
	NSCondition *playListDownloadsDone;	// 84 = 0x54
	int numActualDownloadables;	// 88 = 0x58
	CDNDownloadData *selectedCDN;	// 92 = 0x5c
	NSMutableArray *downloadedContentDownloadableData;	// 96 = 0x60
	NSMutableString *masterM3U8;	// 100 = 0x64
	NSMutableArray *playListGenerators;	// 104 = 0x68
	NSConditionLock *licenseLock;	// 108 = 0x6c
	NSLock *downloadCompleteLock;	// 112 = 0x70
}
@property(readonly, assign, nonatomic) NSCondition *playListDownloadsDone;	// G=0x34deccec; @synthesize
+ (void)cleanUp;	// 0x34deff38
+ (void)enterShutdown;	// 0x34decb24
+ (id)instance;	// 0x34deff6c
- (id)init;	// 0x34df0110
- (BOOL)allContentDownloadableDataDone;	// 0x34df08e8
- (BOOL)buildPlayList:(id)list;	// 0x34ded4e4
- (void)changeState:(int)state;	// 0x34deccd8
- (int)chooseInitialBitrateFromMask:(unsigned)mask;	// 0x34dedcd4
- (void)closeActiveSession;	// 0x34defe1c
- (void)contentDownloadableFinished:(BOOL)finished withBitRate:(unsigned)bitRate withContentProfile:(int)contentProfile withCdn:(unsigned)cdn;	// 0x34df0228
- (void)dealloc;	// 0x34deffc0
- (BOOL)generateLicenseRequestIfNeeded:(id)needed;	// 0x34ded31c
- (id)getCurrentBitrate;	// 0x34defe7c
- (int)getMovieDuration;	// 0x34defec0
- (int)getPlayListGenTE;	// 0x34decb3c
- (id)getPlayListGenerationError;	// 0x34ded260
- (void)initializeForPlayback;	// 0x34defb7c
- (void)loadState:(double)state playing:(BOOL)playing;	// 0x34dedf08
- (void)logNCCPTransactions;	// 0x34df0a1c
- (void)logout;	// 0x34defe00
- (void)playBackEnd:(double)end reason:(id)reason;	// 0x34dee108
- (void)playBackPause:(double)pause;	// 0x34dee534
- (void)playBackResume:(double)resume;	// 0x34dee260
- (void)playBackSeek:(double)seek;	// 0x34dee470
- (void)playBackStartFailed:(double)failed withNccpErr:(int)nccpErr withHttpErr:(long long)httpErr withNWErr:(id)nwerr withErrorMsg:(id)errorMsg;	// 0x34dee688
- (void)playBackStartSucceeded:(double)succeeded;	// 0x34dee818
- (void)playBackUpdate:(double)update;	// 0x34dee5f4
// declared property getter: - (id)playListDownloadsDone;	// 0x34deccec
- (id)playListSendData:(id)data;	// 0x34df0c90
- (int)preparePlayList:(id)list withAudioEncoding:(int *)audioEncoding;	// 0x34df150c
- (void)setDownloadableContentProfile:(int)profile;	// 0x34decbb4
- (void)setInitialBitrate3G:(unsigned)g;	// 0x34decb64
- (void)setInitialBitrateWifi:(unsigned)wifi;	// 0x34decb50
- (void)setKeyUseCustom:(BOOL)custom;	// 0x34decb8c
- (void)setPlayListUseCustom:(BOOL)custom;	// 0x34decb78
- (void)setPosition:(int)position;	// 0x34decbfc
- (void)setUsing3g:(BOOL)g;	// 0x34decba0
- (void)setm3u8bandwithSource:(int)source;	// 0x34decbe8
- (id)stringWithState:(int)state;	// 0x34decc1c
- (BOOL)triggerPlay:(int *)play idkey:(id)idkey idvalue:(id)idvalue secretkey:(id)secretkey secretvalue:(id)secretvalue movieid:(long)movieid trackid:(long)trackid episodeid:(long)episodeid;	// 0x34deea28
- (void)updateNetworkStatus:(id)status netspec:(id)netspec mcc:(id)mcc mnc:(id)mnc carrier:(id)carrier;	// 0x34deddb8
@end

